{"version":3,"sources":["App.js","Data.js","components/Cell.js","serviceWorker.js","index.js"],"names":["lectures","code","name","teacher","starting_hour","class1","Number_of_hours","academic_term","AKTS","Cell","toggle_details","bind","state","details_is_open","this","setState","pre_state","props","lecture1","className","onDoubleClick","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Button","onClick","Component","layout","hours","i","j","push","toString","x","y","w","h","static","App","onDragStop","oldItem","newItem","slectures","filter","item","Number","substring","console","log","slayout","headers","map","key","cellsComponents","lecture","id","data-grid","gridProporities","margin","compactType","preventCollision","cols","isResizable","rowHeight","width","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83091dc2.chunk.js","sourcesContent":["import React from \"react\";\n\n\nimport \"./App.css\";\nimport lectures from \"./Data\";\n\nimport GridLayout from \"react-grid-layout\";\nimport Cell from \"./components/Cell\";\nvar ev;\nvar layout = [];\nconst hours = [\n  \"\",\n  \"09.00-09:50\",\n  \"10:00-10:50\",\n  \"11:00-11:50\",\n  \"12:00-12:50\",\n  \"13:00-13:50\",\n  \"14.00-14.50\",\n  \"15.00-15:50\",\n  \"16:00-16:50\",\n  \"17:00-17:50\",\n  \"18:00-18:50\"\n];\nvar row = 11,\n  colums = 9;\nfor (let i = 0; i < row; i++) {\n  for (let j = 0; j < colums; j++) {\n    if (i === 0 || j === 0)\n      // headers cordinates\n      layout.push({\n        i: i.toString() + j.toString(),\n        x: j,\n        y: i + 1,\n        w: 1,\n        h: 1,\n        static: true\n      });\n  }\n}\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      slayout: layout,\n      slectures: lectures\n    };\n  }\n  onDragStop = (layout,oldItem,newItem,x,y) => {\n    let selectedLecture=this.state.slectures.filter(item=>{return item.code==oldItem.i})[0]\n    selectedLecture.starting_hour=Number(hours[newItem.y-1].substring(0,2))\n     ev=x;\n    console.log(x)\n    console.log(y)\n    \n    // this.forceUpdate(); needede for immediate screen responce no \n  };\n  render() {\n    \n    const headers = this.state.slayout.map(item => {\n      //if cell is from (second row) show semester number if cell from first column  show time range\n      return item.i < 10 ? (\n        <div className=\"headercell\" key={item.i}>\n          {\" \"}\n          {item.i % 10}. D{\" \"}\n        </div>\n      ) : (\n        <div className=\"headercell\" key={item.i}>\n          {\" \"}\n          {hours[item.i / 10]}{\" \"}\n        </div>\n      );\n    });\n// geting all cells in jsx format\n    const cellsComponents = this.state.slectures.map(lecture => {\n      return (\n        <div\n          key={lecture.code}\n          id={lecture.code}\n          data-grid={{\n            x: lecture.academic_term,// detrmine colum number \n            y: (lecture.starting_hour % 9) + 2,// determine row number of cell adding 2 for static rows (headers) starts from 0\n            w: 1,// width of cell\n            h: lecture.Number_of_hours//height of cell depends on lecture hours\n          }}\n        >\n          <Cell lecture1={lecture} />\n        </div>\n      );\n    });\n    let gridProporities = {\n      margin: [5, 5],\n      compactType: null,\n      preventCollision: true,\n      layout: this.state.slayout,\n      cols: 12,\n      isResizable:  false,\n      rowHeight: 44,\n      width: 1200\n     // onDragStart: (oldItem: Griditem )=>console.log(oldItem),\n     // onDrop: (elemParams: { x: number, y: number, e: Event }) => console.log(\"droped\")\n    }\n    \n      \n\n    return (\n      <>\n\n      <GridLayout className=\"layout\" {...gridProporities}\n      onDragStop={this.onDragStop}\n      >\n        <div\n          key=\"a\"\n          data-grid={{ x: 0, y: 0, w: 9, h: 1, static: true }}\n          className=\"headercell\"\n\n        >\n          Pazartesi\n        </div>\n        {headers}\n        {cellsComponents}\n       \n      </GridLayout>\n    \n       \n       </>\n    );\n  }\n}\n\nexport default App;\n","const lectures =[\n    {   code:\"BLM103\",\n        name:\"Programlama-1\",\n        teacher:\"Dr. Öğr. Üys. Dr.A. Nizam\",\n        starting_hour:9,\n        class1:\"H-D102\",\n        Number_of_hours:3,\n        academic_term:1\n        ,AKTS:6\n        \n    },\n    {   code:\"BLM104\",\n    name:\"Programlama-2\",\n    teacher:\"Dr. Öğr. Üys.Kazım Yıldız\",\n    starting_hour:12,\n    class1:\"H-D103\",\n    Number_of_hours:3,\n    academic_term:2\n    ,AKTS:6\n    \n}, {   code:\"BLM104Uy\",\nname:\"Programlama-2 Uyg.\",\nteacher:\"Dr. Öğr. Üys.Kazım Yıldız\",\nstarting_hour:15,\nclass1:\"H-C109\",\nNumber_of_hours:2,\nacademic_term:2\n,AKTS:6\n},\n{   code:\"MAT217E\",\nname:\"Ayrık Yapılar-1\",\nteacher:\"Dr. Öğr. Üys.Berna Kiraz\",\nstarting_hour:9,\nclass1:\"H-A112\",\nNumber_of_hours:3,\nacademic_term:3\n,AKTS:6\n},\n{   code:\"MAT215E\",\nname:\"Differansiyel Uyg.\",\nteacher:\"Dr. Öğr. Üyesi Burcu BEKTAŞ DEMİRCİ\",\nstarting_hour:14,\nclass1:\"H-A111\",\nNumber_of_hours:3,\nacademic_term:3,\nAKTS:6\n\n}, {   code:\"BLM301\",\nname:\"işletim Sistemleri-Uyg\",\nteacher:\"Prof. Dr. A. Y. Çamurcu\",\nstarting_hour:10,\nclass1:\"H-B131\",\nNumber_of_hours:2,\nacademic_term:5\n,AKTS:5\n},\n{   code:\"BLM303\",\nname :\"Veri Tabanı\",\nteacher:\"Dr. Öğr. Üys. A. Nizam\",\nstarting_hour:13,\nclass1:\"H-B131\",\nNumber_of_hours:3,\nacademic_term:5\n,AKTS:5\n}\n]\nexport default lectures;\n\n\n","import React, { Component } from \"react\";\nimport { Modal, Button, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport lectures from \"../Data\";\nexport default class Cell extends Component {\n  constructor() {\n    super();\n    this.toggle_details = this.toggle_details.bind(this);\n    this.state = {\n      details_is_open: false\n    };\n  }\n  toggle_details() {\n    this.setState(pre_state => {\n      return {\n        details_is_open: !pre_state.details_is_open\n      };\n    });\n  }\n\n  render() {\n    const {\n      code,\n      name,\n      teacher,\n      class1,\n      Number_of_hours,\n      academic_term,\n      starting_hour,\n      AKTS\n    } = this.props.lecture1;\n    return (\n      <div className=\"react-grid-item sml\" onDoubleClick={this.toggle_details}>\n        <div>{code}</div>\n        <div>{name}</div>\n        <div>{class1} </div>\n    \n        <Modal isOpen={this.state.details_is_open}>\n          <ModalHeader> Ders Kodu : {code}</ModalHeader>\n          <ModalBody>\n            \n            <pre>Ders Adı        : {name}</pre>\n            <pre>Öğretim Elemanı : {teacher}</pre>\n            <pre>Sınıf Adı       : {class1}</pre>\n            <pre>AKTS            : {AKTS}</pre>\n            <pre>Starting hour   : {starting_hour}</pre>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={this.toggle_details}>Close</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}